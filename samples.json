[
    {
        "title": "Uppercase Names from JSON Array",
        "description": "Extract names from a JSON array and return them in uppercase.",
        "prompt": "Data: JSON array of objects\nTask: return the names in uppercase",
        "data": "[{\"name\":\"Alice\"},{\"name\":\"Bob\"},{\"name\":\"Charlie\"}]",
        "code": "const obj = JSON.parse(data);\nreturn obj.map(x => x.name.toUpperCase());",
        "output": "[\n  \"ALICE\",\n  \"BOB\",\n  \"CHARLIE\"\n]"
    },
    {
        "title": "Filter CSV by Age or City",
        "description": "Return names of people older than 30 or living in Berlin from a CSV.",
        "prompt": "Data: CSV with columns first name, last name,age, city\nTask: return only the names of people older than 30 as a JSON array or living in Berlin",
        "data": "John,Doe,28,Berlin\nJane,Smith,35,London\nMax,Mustermann,40,Berlin\nAnna,Müller,25,Hamburg",
        "code": "const rows = data.split('\\n').map(row => row.trim()).filter(row => row !== '');\nreturn rows.filter(row => {\n  const [, , age, city] = row.split(',').map(item => item.trim());\n  return parseInt(age, 10) > 30 || city === 'Berlin';\n}).map(row => {\n  const [firstName, lastName] = row.split(',').map(item => item.trim());\n  return `${firstName} ${lastName}`;\n});",
        "output": "[\n  \"John Doe\",\n  \"Jane Smith\",\n  \"Max Mustermann\"\n]"
    },
    {
        "title": "HTML List of People with Age from CSV",
        "description": "Create an HTML bullet list of people with their age from a CSV.",
        "prompt": "I have a data set with people that looks like this:\nFirst Name,Last Name,Birth Date,City\nElijah,Lopez,1992-06-20,Houston\nOlivia,Rodriguez,1986-04-11,Philadelphia\nElijah,Davis,1993-07-01,San Jose\nCan you generate Javascript that processes this data and create an HTML bullet list that a concatenation of first name and last name with their age between parentheses, like:\n<ul>\n<li>Elijah Lopez (33)</li>\n<li>Olivia Rodriguez(39)</li>\n</ul>\nOnly generate the JavaScript - nothing else.",
        "data": "First Name,Last Name,Birth Date,City\nElijah,Lopez,1992-06-20,Houston\nOlivia,Rodriguez,1986-04-11,Philadelphia\nElijah,Davis,1993-07-01,San Jose",
        "code": "const rows = data.trim().split(\"\\n\").slice(1);\nconst people = rows.map(line => {\n  const [firstName, lastName, birthDate] = line.split(\",\");\n  return { firstName, lastName, birthDate };\n});\nfunction getAge(birthDateStr) {\n  const today = new Date();\n  const birthDate = new Date(birthDateStr);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const m = today.getMonth() - birthDate.getMonth();\n  if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\nlet html = \"<ul>\\n\";\npeople.forEach(p => {\n  html += `<li>${p.firstName} ${p.lastName} (${getAge(p.birthDate)})</li>\\n`;\n});\nhtml += \"</ul>\";\nreturn html;",
        "output": "<ul>\n<li>Elijah Lopez (33)</li>\n<li>Olivia Rodriguez (39)</li>\n<li>Elijah Davis (32)</li>\n</ul>"
    },
    {
        "title": "Random Dutch Names",
        "description": "Generate a list of 50 random popular Dutch names for boys and girls.",
        "prompt": "generate JavaScript for creating a list of 50 random popular Dutch names for boys and girls",
        "data": "",
        "code": "const dutchFirstNames = [\n  \"Daan\", \"Emma\", \"Noah\", \"Julia\", \"Sem\", \"Mila\", \"Luuk\", \"Tess\", \"Finn\", \"Sophie\",\n  \"Liam\", \"Zoë\", \"Jesse\", \"Sara\", \"Jayden\", \"Lotte\", \"Thijs\", \"Eva\", \"Mees\", \"Anna\",\n  \"Bram\", \"Nina\", \"Milan\", \"Isa\", \"Tijn\", \"Evi\", \"Gijs\", \"Luna\", \"Siem\", \"Fleur\",\n  \"Sam\", \"Yara\", \"Tom\", \"Liv\", \"Boaz\", \"Elin\", \"Ruben\", \"Noor\", \"Cas\", \"Maud\",\n  \"Julian\", \"Saar\", \"Levi\", \"Jasmijn\", \"Benjamin\", \"Amélie\", \"David\", \"Lina\", \"Joep\", \"Roos\"\n];\nfunction getRandomNames(count) {\n  const shuffled = dutchFirstNames.sort(() => 0.5 - Math.random());\n  return shuffled.slice(0, count);\n}\nconst randomDutchNames = getRandomNames(50);\nreturn randomDutchNames;",
        "output": "[\n  \"Daan\", \"Milan\", \"Emma\", \"Jayden\", \"Joep\", \"Mila\", \"Lina\", \"Bram\", \"Evi\", \"Julia\",\n  \"Siem\", \"David\", \"Ruben\", \"Thijs\", \"Isa\", \"Elin\", \"Noah\", \"Luna\", \"Sem\", \"Jasmijn\",\n  \"Zoë\", \"Nina\", \"Tess\", \"Julian\", \"Levi\", \"Amélie\", \"Sara\", \"Sophie\", \"Saar\", \"Liv\",\n  \"Tijn\", \"Mees\", \"Anna\", \"Maud\", \"Luuk\", \"Jesse\", \"Fleur\", \"Sam\", \"Boaz\", \"Finn\",\n  \"Yara\", \"Liam\", \"Cas\", \"Benjamin\", \"Tom\", \"Lotte\", \"Roos\", \"Noor\", \"Gijs\", \"Eva\"\n]"
    },
    {
        "title": "Deduplicate CSV",
        "description": "Remove duplicate records from a CSV data set - by keeping only the first record with a specific value for the name field",
        "prompt": "You are a code assistant. \nI will provide you with:\n- The input data (as a string, which may be CSV, JSON, or plain text).\n- The transformation or processing I want done.\n\nWrite a single JavaScript function body that:\n- Accepts one argument called `data` (string).\n- Processes it according to my request.\n- Returns the result (object, array, or string).\n\nImportant:\n- Do not include explanations or comments.\n- Do not include markdown formatting or triple backticks.\n- The output must be **only valid JavaScript code** for the function body.\n\nExample input:\nData: JSON array of objects\nTask: return the names in uppercase\n\nDesired Example Output:\nconst obj = JSON.parse(data);\nreturn obj.map(x => x.name.toUpperCase());\n\n\nNow here is my request:\nData: [name,city,#employees,revenue,industry,year of founding\nAcme,New York,1500,500M,Technology,1998\nGlobex Inc.,San Francisco,800,250M,Finance,2005\nTyrell Corporation,Los Angeles,2200,1.2B,Manufacturing,1985\nStark Industries,Chicago,5000,5.5B,Aerospace,1969\nTyrell Corporation,Gotham,1200,800M,Real Estate,1939\nOmni Consumer Products,Detroit,900,350M,Retail,1978\nTyrell Corporation,Seattle,3500,2.1B,Biotechnology,2010\nAcme,New York,1500,500M,Technology,1998]\n\nTask: [deduplicate these records based on the name field]",
        "data": "name,city,#employees,revenue,industry,year of founding\nAcme,New York,1500,500M,Technology,1998\nGlobex Inc.,San Francisco,800,250M,Finance,2005\nTyrell Corporation,Los Angeles,2200,1.2B,Manufacturing,1985\nStark Industries,Chicago,5000,5.5B,Aerospace,1969\nTyrell Corporation,Gotham,1200,800M,Real Estate,1939\nOmni Consumer Products,Detroit,900,350M,Retail,1978\nTyrell Corporation,Seattle,3500,2.1B,Biotechnology,2010\nAcme,New York,1500,500M,Technology,1998\n",
        "code": "const lines = data.split('\\n').map(line => line.trim()).filter(line => line !== '');\nconst header = lines[0];\nconst records = lines.slice(1);\nconst seenNames = new Set();\nconst deduplicatedRecords = [];\nfor (const record of records) {\n  const name = record.split(',')[0].trim();\n  if (!seenNames.has(name)) {\n    seenNames.add(name);\n    deduplicatedRecords.push(record);\n  }\n}\nreturn [header, ...deduplicatedRecords].join('\\n');",
        "output": "name,city,#employees,revenue,industry,year of founding\nAcme,New York,1500,500M,Technology,1998\nGlobex Inc.,San Francisco,800,250M,Finance,2005\nTyrell Corporation,Los Angeles,2200,1.2B,Manufacturing,1985\nStark Industries,Chicago,5000,5.5B,Aerospace,1969\nOmni Consumer Products,Detroit,900,350M,Retail,1978"
    },
    {
        "title": "Sort CSV data by any field",
        "description": "Take a CSV data set. Add an asterisk to the field you want to sort by. Run the JS code to have the data sorted by that field",
        "prompt": "You are a code assistant. \n\nI will provide you with:\n\n- The input data (as a string, which may be CSV, JSON, or plain text).\n\n- The transformation or processing I want done.\n\n\n\nWrite a single JavaScript function body that:\n\n- Accepts one argument called `data` (string).\n\n- Processes it according to my request.\n\n- Returns the result (object, array, or string).\n\n\n\nImportant:\n\n- Do not include explanations or comments.\n\n- Do not include markdown formatting or triple backticks.\n\n- The output must be **only valid JavaScript code** for the function body.\n\n\n\nExample input:\n\nData: JSON array of objects\n\nTask: return the names in uppercase\n\n\n\nDesired Example Output:\n\nconst obj = JSON.parse(data);\n\nreturn obj.map(x => x.name.toUpperCase());\n\n\n\n\n\nNow here is my request:\n\nData: \n\nname,city,#employees,revenue,industry*,year of founding\n\nAcme Corporation,New York,1500,500M,Technology,1998\n\nGlobex Inc.,San Francisco,800,250M,Finance,2005\n\nCyberdyne Systems,Los Angeles,2200,1.2B,Manufacturing,1985\n\nStark Industries,Chicago,5000,5.5B,Aerospace,1969\n\nWayne Enterprises,Gotham,1200,800M,Real Estate,1939\n\nOmni Consumer Products,Detroit,900,350M,Retail,1978\n\nTyrell Corporation,Seattle,3500,2.1B,Biotechnology,2010\n\nDunder Mifflin,Scranton,50,15M,Paper,1980\n\nInitech,Dallas,300,90M,Software,1995\n\nWeyland-Yutani Corp,London,4500,3.8B,Logistics,2001\n\nGekko & Co.,Miami,100,50M,Investment,2012\n\nPied Piper,Palo Alto,75,25M,Technology,2014\n\nHooli,Mountain View,1800,900M,Technology,2007\n\nMassive Dynamic,Boston,2500,1.5B,Science,1990\n\nSoylent Corporation,Sacramento,400,120M,Food,20\n\n\n\nTask: \n\nFind the field with an asterisk at the end and sort the data by that field. If the field contains numerical values, then sort from minimum to maximum, otherwise sort alphabetically. Return the data in the same CSV format. Move the sort field to the front.",
        "data": "name,city,#employees,revenue,industry,year of founding*\nAcme Corporation,New York,1500,500M,Technology,1998\nGlobex Inc.,San Francisco,800,250M,Finance,2005\nCyberdyne Systems,Los Angeles,2200,1.2B,Manufacturing,1985\nStark Industries,Chicago,5000,5.5B,Aerospace,1969\nWayne Enterprises,Gotham,1200,800M,Real Estate,1939\nOmni Consumer Products,Detroit,900,350M,Retail,1978\nTyrell Corporation,Seattle,3500,2.1B,Biotechnology,2010\nDunder Mifflin,Scranton,50,15M,Paper,1980\nInitech,Dallas,300,90M,Software,1995\nWeyland-Yutani Corp,London,4500,3.8B,Logistics,2001\nGekko & Co.,Miami,100,50M,Investment,2012\nPied Piper,Palo Alto,75,25M,Technology,2014\nHooli,Mountain View,1800,900M,Technology,2007\nMassive Dynamic,Boston,2500,1.5B,Science,1990\nSoylent Corporation,Sacramento,400,120M,Food,2015\nVeridian Dynamics,Houston,1100,600M,Research & Development,2003\nAbstergo Industries,Montreal,3000,2.5B,Entertainment,2008\nUmbrella Corporation,Raccoon City,2000,1.8B,Pharmaceuticals,1999\nWonka Industries,London,600,200M,Confectionery,1971\nMonsters Inc.,Monstropolis,700,450M,Energy,2006\nGen-Pop,Austin,150,75M,Marketing,2018\nThe Buy n Large Corporation,New York,10000,10B,Conglomerate,2020\nThe Dharma Initiative,Ann Arbor,500,300M,Research,1998\nOscorp,New York,2800,2.3B,Genetics,2004\nCyberdyne Systems,Los Angeles,2200,1.2B,Manufacturing,1985",
        "code": "const lines = data.split('\\n');\nconst headerLine = lines[0];\nconst dataLines = lines.slice(1);\nconst headers = headerLine.split(',');\nlet sortHeader = '';\nlet sortKey = '';\nfor (const header of headers) {\n    if (header.endsWith('*')) {\n        sortHeader = header;\n        sortKey = header.slice(0, -1);\n        break;\n    }\n}\nconst parsedData = dataLines.map(line => {\n    const values = line.split(',');\n    const obj = {};\n    headers.forEach((h, i) => {\n        obj[h.replace('*', '')] = values[i];\n    });\n    return obj;\n});\nconst isNumeric = parsedData.length > 0 && !isNaN(parseFloat(parsedData[0][sortKey]));\nif (isNumeric) {\n    parsedData.sort((a, b) => parseFloat(a[sortKey]) - parseFloat(b[sortKey]));\n} else {\n    parsedData.sort((a, b) => a[sortKey].localeCompare(b[sortKey]));\n}\nconst newHeaders = [sortHeader, ...headers.filter(h => h !== sortHeader)];\nconst newHeaderLine = newHeaders.join(',');\nconst newCsvLines = parsedData.map(obj => newHeaders.map(h => obj[h.replace('*', '')]).join(','));\nreturn [newHeaderLine, ...newCsvLines].join('\\n');",
        "output": "year of founding*,name,city,#employees,revenue,industry\n1939,Wayne Enterprises,Gotham,1200,800M,Real Estate\n1969,Stark Industries,Chicago,5000,5.5B,Aerospace\n1971,Wonka Industries,London,600,200M,Confectionery\n1978,Omni Consumer Products,Detroit,900,350M,Retail\n1980,Dunder Mifflin,Scranton,50,15M,Paper\n1985,Cyberdyne Systems,Los Angeles,2200,1.2B,Manufacturing\n1985,Cyberdyne Systems,Los Angeles,2200,1.2B,Manufacturing\n1990,Massive Dynamic,Boston,2500,1.5B,Science\n1995,Initech,Dallas,300,90M,Software\n1998,Acme Corporation,New York,1500,500M,Technology\n1998,The Dharma Initiative,Ann Arbor,500,300M,Research\n1999,Umbrella Corporation,Raccoon City,2000,1.8B,Pharmaceuticals\n2001,Weyland-Yutani Corp,London,4500,3.8B,Logistics\n2003,Veridian Dynamics,Houston,1100,600M,Research & Development\n2004,Oscorp,New York,2800,2.3B,Genetics\n2005,Globex Inc.,San Francisco,800,250M,Finance\n2006,Monsters Inc.,Monstropolis,700,450M,Energy\n2007,Hooli,Mountain View,1800,900M,Technology\n2008,Abstergo Industries,Montreal,3000,2.5B,Entertainment\n2010,Tyrell Corporation,Seattle,3500,2.1B,Biotechnology\n2012,Gekko & Co.,Miami,100,50M,Investment\n2014,Pied Piper,Palo Alto,75,25M,Technology\n2015,Soylent Corporation,Sacramento,400,120M,Food\n2018,Gen-Pop,Austin,150,75M,Marketing\n2020,The Buy n Large Corporation,New York,10000,10B,Conglomerate"
    },
    {
        "title": "Sudoku Solver",
        "description": "With a Sudoku in a simple form: 9x9 grid, periods or digits as starting point",
        "prompt": "You are a code assistant. \n\nI will provide you with:\n\n- The input data (as a string, which may be CSV, JSON, or plain text).\n\n- The transformation or processing I want done.\n\n\n\nWrite a single JavaScript function body that:\n\n- Accepts one argument called `data` (string).\n\n- Processes it according to my request.\n\n- Returns the result (object, array, or string).\n\n\n\nImportant:\n\n- Do not include explanations or comments.\n\n- Do not include markdown formatting or triple backticks.\n\n- The output must be **only valid JavaScript code** for the function body.\n\n\n\nExample input:\n\nData: JSON array of objects\n\nTask: return the names in uppercase\n\n\n\nDesired Example Output:\n\nconst obj = JSON.parse(data);\n\nreturn obj.map(x => x.name.toUpperCase());\n\n\n\n\n\nNow here is my request:\n\nData - a Sudoku in a 9x9 grid:\n\n53..7....\n\n6..195...\n\n.98....6.\n\n8...6...3\n\n4..8.3..1\n\n7...2...6\n\n.6....28.\n\n...419..5\n\n....8..79\n\n\n\nTask: [generate the JavaScript to complete the Sudoku - determine which digits go int the place of the periods]",
        "data": "53..7....\n6..195...\n.98....6.\n8...6...3\n4..8.3..1\n7...2...6\n.6....28.\n...419..5\n....8..79",
        "code": "const board = data.split('\\n').map(row => row.split('').map(char => char === '.' ? 0 : parseInt(char, 10)));\nfunction isValid(board, row, col, num) {\n  for (let x = 0; x < 9; x++) {\n    if (board[row][x] === num || board[x][col] === num) {\n      return false;\n    }\n  }\n  const startRow = Math.floor(row / 3) * 3;\n  const startCol = Math.floor(col / 3) * 3;\n  for (let i = 0; i < 3; i++) {\n    for (let j = 0; j < 3; j++) {\n      if (board[i + startRow][j + startCol] === num) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\nfunction solve(b) {\n  for (let r = 0; r < 9; r++) {\n    for (let c = 0; c < 9; c++) {\n      if (b[r][c] === 0) {\n        for (let num = 1; num <= 9; num++) {\n          if (isValid(b, r, c, num)) {\n            b[r][c] = num;\n            if (solve(b)) {\n              return true;\n            }\n            b[r][c] = 0;\n          }\n        }\n        return false;\n      }\n    }\n  }\n  return true;\n}\nsolve(board);\nreturn board.map(row => row.join('')).join('\\n');",
        "output": "534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179"
    },
    {
        "title": "Formula One Vertical Barchart",
        "description": "Based on (imaginary) Formula One racing results, generate the SVG code to visualize the results as vertical stacked barcharts. Copy and Paste SVG into https://www.svgviewer.dev/ to see the barchart",
        "prompt": "You are a code assistant. \nI will provide you with:\n- The input data (as a string, which may be CSV, JSON, or plain text).\n- The transformation or processing I want done.\n\nWrite a single JavaScript function body that:\n- Accepts one argument called `data` (string).\n- Processes it according to my request.\n- Returns the result (object, array, or string).\n\nImportant:\n- Do not include explanations or comments.\n- Do not include markdown formatting or triple backticks.\n- The output must be **only valid JavaScript code** for the function body.\n\nExample input:\nData: JSON array of objects\nTask: return the names in uppercase\n\nDesired Example Output:\nconst obj = JSON.parse(data);\nreturn obj.map(x => x.name.toUpperCase());\n\n\nNow here is my request:\nData: \nDriver,Race1,Race2,Race3,Race4,Race5,Race6,Race7,Race8,Race9,Race10,Race11,Race12,Race13,Race14,Race15 \nAlex Storm,18,12,25,0,15,10,8,25,12,6,25,18,0,10,15 \nMaya Vega,10,25,18,15,12,0,25,18,6,25,8,12,15,25,18 \nLiam Cross,6,18,10,25,8,25,12,15,25,12,15,25,18,8,12 \n\nTask: \nProduce the SVG code for presenting a stacked vertical barchart of the drivers and their number of points. Every bar in the stack represents one of the races.",
        "data": "Driver,Race1,Race2,Race3,Race4,Race5,Race6,Race7,Race8,Race9,Race10,Race11,Race12,Race13,Race14,Race15 \nAlex Storm,18,12,25,0,15,10,8,25,12,6,25,18,0,10,15 \nMaya Vega,10,25,18,15,12,0,25,18,6,25,8,12,15,25,18 \nLiam Cross,6,18,10,25,8,25,12,15,25,12,15,25,18,8,12 \nSofia Blaze,25,8,15,12,25,18,6,10,18,25,12,15,25,6,10 \nEthan Vortex,12,6,8,18,10,15,25,12,0,18,18,6,10,18,25 \nZara Nova,15,10,6,8,18,12,10,6,25,15,6,10,12,12,18 \nKai Thunder,0,15,12,10,6,25,18,0,15,8,25,18,8,25,6 \nNoah Falcon,8,0,0,6,25,8,15,18,10,10,15,12,18,15,12 \nIsla Drift,18,12,25,8,0,6,12,25,18,0,10,25,15,18,15 \nRavi Blaze,12,25,15,18,18,10,0,8,6,18,12,10,6,12,8",
        "code": "const rows = data.trim().split('\\n').slice(1);\nconst headers = data.trim().split('\\n')[0].split(',');\nconst raceNames = headers.slice(1);\nconst drivers = rows.map(row => {\n  const cols = row.split(',');\n  return {\n    name: cols[0],\n    scores: cols.slice(1).map(s => parseInt(s, 10))\n  };\n});\nconst driverScores = drivers.map(d => d.scores.reduce((sum, score) => sum + score, 0));\nconst maxTotalScore = Math.max(...driverScores);\nconst driverCount = drivers.length;\nconst barWidth = 100;\nconst barSpacing = 50;\nconst chartHeight = 300;\nconst chartWidth = driverCount * (barWidth + barSpacing);\nconst svgWidth = chartWidth + 150;\nconst svgHeight = chartHeight + 100;\nconst yAxisOffset = 50;\nconst xAxisOffset = chartHeight + yAxisOffset;\nconst scaleY = chartHeight / maxTotalScore;\nconst colors = [\"#E63946\", \"#F4A261\", \"#E9C46A\", \"#2A9D8F\", \"#264653\", \"#9D4EDD\", \"#FFC8DD\", \"#A2D2FF\", \"#BDE0FE\", \"#FFB5A7\", \"#A5A58D\", \"#6D6875\", \"#B5838D\", \"#E5989B\", \"#6D597A\"];\nlet svgContent = '';\nlet xPos = yAxisOffset + barSpacing / 2;\ndrivers.forEach((driver, i) => {\n  let currentY = xAxisOffset;\n  driver.scores.forEach((score, j) => {\n    const rectHeight = score * scaleY;\n    currentY -= rectHeight;\n    svgContent += `<rect x=\"${xPos}\" y=\"${currentY}\" width=\"${barWidth}\" height=\"${rectHeight}\" fill=\"${colors[j]}\"/>`;\n  });\n  svgContent += `<text x=\"${xPos + barWidth / 2}\" y=\"${xAxisOffset + 20}\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">${driver.name}</text>`;\n  xPos += barWidth + barSpacing;\n});\nsvgContent += `<line x1=\"${yAxisOffset}\" y1=\"${yAxisOffset}\" x2=\"${yAxisOffset}\" y2=\"${xAxisOffset}\" stroke=\"#333\"/>`;\nfor (let i = 0; i <= maxTotalScore; i += 25) {\n  const y = xAxisOffset - (i * scaleY);\n  svgContent += `<line x1=\"${yAxisOffset}\" y1=\"${y}\" x2=\"${yAxisOffset - 5}\" y2=\"${y}\" stroke=\"#333\"/>`;\n  svgContent += `<text x=\"${yAxisOffset - 10}\" y=\"${y + 4}\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">${i}</text>`;\n}\nconst legendX = svgWidth - 100;\nconst legendY = 50;\nsvgContent += `<text x=\"${legendX}\" y=\"${legendY}\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Races</text>`;\nraceNames.forEach((race, i) => {\n  const rectY = legendY + 20 + i * 20;\n  svgContent += `<rect x=\"${legendX}\" y=\"${rectY}\" width=\"15\" height=\"15\" fill=\"${colors[i]}\"/>`;\n  svgContent += `<text x=\"${legendX + 20}\" y=\"${rectY + 12}\" font-size=\"12\" fill=\"#333\">${race}</text>`;\n});\nconst svg = `<svg width=\"${svgWidth}\" height=\"${svgHeight}\" viewBox=\"0 0 ${svgWidth} ${svgHeight}\" xmlns=\"http://www.w3.org/2000/svg\" style=\"font-family: sans-serif;\">${svgContent}</svg>`;\nreturn svg;",
        "output": "<svg width=\"1650\" height=\"400\" viewBox=\"0 0 1650 400\" xmlns=\"http://www.w3.org/2000/svg\" style=\"font-family: sans-serif;\"><rect x=\"75\" y=\"326.9230769230769\" width=\"100\" height=\"23.07692307692308\" fill=\"#E63946\"/><rect x=\"75\" y=\"311.53846153846155\" width=\"100\" height=\"15.384615384615387\" fill=\"#F4A261\"/><rect x=\"75\" y=\"279.4871794871795\" width=\"100\" height=\"32.05128205128205\" fill=\"#E9C46A\"/><rect x=\"75\" y=\"279.4871794871795\" width=\"100\" height=\"0\" fill=\"#2A9D8F\"/><rect x=\"75\" y=\"260.2564102564103\" width=\"100\" height=\"19.230769230769234\" fill=\"#264653\"/><rect x=\"75\" y=\"247.43589743589746\" width=\"100\" height=\"12.820512820512821\" fill=\"#9D4EDD\"/><rect x=\"75\" y=\"237.1794871794872\" width=\"100\" height=\"10.256410256410257\" fill=\"#FFC8DD\"/><rect x=\"75\" y=\"205.12820512820517\" width=\"100\" height=\"32.05128205128205\" fill=\"#A2D2FF\"/><rect x=\"75\" y=\"189.74358974358978\" width=\"100\" height=\"15.384615384615387\" fill=\"#BDE0FE\"/><rect x=\"75\" y=\"182.0512820512821\" width=\"100\" height=\"7.692307692307693\" fill=\"#FFB5A7\"/><rect x=\"75\" y=\"150.00000000000006\" width=\"100\" height=\"32.05128205128205\" fill=\"#A5A58D\"/><rect x=\"75\" y=\"126.92307692307698\" width=\"100\" height=\"23.07692307692308\" fill=\"#6D6875\"/><rect x=\"75\" y=\"126.92307692307698\" width=\"100\" height=\"0\" fill=\"#B5838D\"/><rect x=\"75\" y=\"114.10256410256416\" width=\"100\" height=\"12.820512820512821\" fill=\"#E5989B\"/><rect x=\"75\" y=\"94.87179487179492\" width=\"100\" height=\"19.230769230769234\" fill=\"#6D597A\"/><text x=\"125\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Alex Storm</text><rect x=\"225\" y=\"337.1794871794872\" width=\"100\" height=\"12.820512820512821\" fill=\"#E63946\"/><rect x=\"225\" y=\"305.12820512820514\" width=\"100\" height=\"32.05128205128205\" fill=\"#F4A261\"/><rect x=\"225\" y=\"282.05128205128204\" width=\"100\" height=\"23.07692307692308\" fill=\"#E9C46A\"/><rect x=\"225\" y=\"262.8205128205128\" width=\"100\" height=\"19.230769230769234\" fill=\"#2A9D8F\"/><rect x=\"225\" y=\"247.43589743589743\" width=\"100\" height=\"15.384615384615387\" fill=\"#264653\"/><rect x=\"225\" y=\"247.43589743589743\" width=\"100\" height=\"0\" fill=\"#9D4EDD\"/><rect x=\"225\" y=\"215.3846153846154\" width=\"100\" height=\"32.05128205128205\" fill=\"#FFC8DD\"/><rect x=\"225\" y=\"192.30769230769232\" width=\"100\" height=\"23.07692307692308\" fill=\"#A2D2FF\"/><rect x=\"225\" y=\"184.61538461538464\" width=\"100\" height=\"7.692307692307693\" fill=\"#BDE0FE\"/><rect x=\"225\" y=\"152.5641025641026\" width=\"100\" height=\"32.05128205128205\" fill=\"#FFB5A7\"/><rect x=\"225\" y=\"142.30769230769235\" width=\"100\" height=\"10.256410256410257\" fill=\"#A5A58D\"/><rect x=\"225\" y=\"126.92307692307696\" width=\"100\" height=\"15.384615384615387\" fill=\"#6D6875\"/><rect x=\"225\" y=\"107.69230769230774\" width=\"100\" height=\"19.230769230769234\" fill=\"#B5838D\"/><rect x=\"225\" y=\"75.64102564102569\" width=\"100\" height=\"32.05128205128205\" fill=\"#E5989B\"/><rect x=\"225\" y=\"52.56410256410261\" width=\"100\" height=\"23.07692307692308\" fill=\"#6D597A\"/><text x=\"275\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Maya Vega</text><rect x=\"375\" y=\"342.3076923076923\" width=\"100\" height=\"7.692307692307693\" fill=\"#E63946\"/><rect x=\"375\" y=\"319.2307692307692\" width=\"100\" height=\"23.07692307692308\" fill=\"#F4A261\"/><rect x=\"375\" y=\"306.4102564102564\" width=\"100\" height=\"12.820512820512821\" fill=\"#E9C46A\"/><rect x=\"375\" y=\"274.35897435897436\" width=\"100\" height=\"32.05128205128205\" fill=\"#2A9D8F\"/><rect x=\"375\" y=\"264.1025641025641\" width=\"100\" height=\"10.256410256410257\" fill=\"#264653\"/><rect x=\"375\" y=\"232.05128205128204\" width=\"100\" height=\"32.05128205128205\" fill=\"#9D4EDD\"/><rect x=\"375\" y=\"216.66666666666666\" width=\"100\" height=\"15.384615384615387\" fill=\"#FFC8DD\"/><rect x=\"375\" y=\"197.43589743589743\" width=\"100\" height=\"19.230769230769234\" fill=\"#A2D2FF\"/><rect x=\"375\" y=\"165.3846153846154\" width=\"100\" height=\"32.05128205128205\" fill=\"#BDE0FE\"/><rect x=\"375\" y=\"150\" width=\"100\" height=\"15.384615384615387\" fill=\"#FFB5A7\"/><rect x=\"375\" y=\"130.76923076923077\" width=\"100\" height=\"19.230769230769234\" fill=\"#A5A58D\"/><rect x=\"375\" y=\"98.71794871794873\" width=\"100\" height=\"32.05128205128205\" fill=\"#6D6875\"/><rect x=\"375\" y=\"75.64102564102565\" width=\"100\" height=\"23.07692307692308\" fill=\"#B5838D\"/><rect x=\"375\" y=\"65.38461538461539\" width=\"100\" height=\"10.256410256410257\" fill=\"#E5989B\"/><rect x=\"375\" y=\"50\" width=\"100\" height=\"15.384615384615387\" fill=\"#6D597A\"/><text x=\"425\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Liam Cross</text><rect x=\"525\" y=\"317.94871794871796\" width=\"100\" height=\"32.05128205128205\" fill=\"#E63946\"/><rect x=\"525\" y=\"307.6923076923077\" width=\"100\" height=\"10.256410256410257\" fill=\"#F4A261\"/><rect x=\"525\" y=\"288.46153846153845\" width=\"100\" height=\"19.230769230769234\" fill=\"#E9C46A\"/><rect x=\"525\" y=\"273.0769230769231\" width=\"100\" height=\"15.384615384615387\" fill=\"#2A9D8F\"/><rect x=\"525\" y=\"241.02564102564105\" width=\"100\" height=\"32.05128205128205\" fill=\"#264653\"/><rect x=\"525\" y=\"217.94871794871796\" width=\"100\" height=\"23.07692307692308\" fill=\"#9D4EDD\"/><rect x=\"525\" y=\"210.25641025641028\" width=\"100\" height=\"7.692307692307693\" fill=\"#FFC8DD\"/><rect x=\"525\" y=\"197.43589743589746\" width=\"100\" height=\"12.820512820512821\" fill=\"#A2D2FF\"/><rect x=\"525\" y=\"174.35897435897436\" width=\"100\" height=\"23.07692307692308\" fill=\"#BDE0FE\"/><rect x=\"525\" y=\"142.30769230769232\" width=\"100\" height=\"32.05128205128205\" fill=\"#FFB5A7\"/><rect x=\"525\" y=\"126.92307692307693\" width=\"100\" height=\"15.384615384615387\" fill=\"#A5A58D\"/><rect x=\"525\" y=\"107.69230769230771\" width=\"100\" height=\"19.230769230769234\" fill=\"#6D6875\"/><rect x=\"525\" y=\"75.64102564102566\" width=\"100\" height=\"32.05128205128205\" fill=\"#B5838D\"/><rect x=\"525\" y=\"67.94871794871797\" width=\"100\" height=\"7.692307692307693\" fill=\"#E5989B\"/><rect x=\"525\" y=\"55.12820512820515\" width=\"100\" height=\"12.820512820512821\" fill=\"#6D597A\"/><text x=\"575\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Sofia Blaze</text><rect x=\"675\" y=\"334.61538461538464\" width=\"100\" height=\"15.384615384615387\" fill=\"#E63946\"/><rect x=\"675\" y=\"326.92307692307696\" width=\"100\" height=\"7.692307692307693\" fill=\"#F4A261\"/><rect x=\"675\" y=\"316.6666666666667\" width=\"100\" height=\"10.256410256410257\" fill=\"#E9C46A\"/><rect x=\"675\" y=\"293.5897435897436\" width=\"100\" height=\"23.07692307692308\" fill=\"#2A9D8F\"/><rect x=\"675\" y=\"280.7692307692308\" width=\"100\" height=\"12.820512820512821\" fill=\"#264653\"/><rect x=\"675\" y=\"261.53846153846155\" width=\"100\" height=\"19.230769230769234\" fill=\"#9D4EDD\"/><rect x=\"675\" y=\"229.4871794871795\" width=\"100\" height=\"32.05128205128205\" fill=\"#FFC8DD\"/><rect x=\"675\" y=\"214.10256410256412\" width=\"100\" height=\"15.384615384615387\" fill=\"#A2D2FF\"/><rect x=\"675\" y=\"214.10256410256412\" width=\"100\" height=\"0\" fill=\"#BDE0FE\"/><rect x=\"675\" y=\"191.02564102564105\" width=\"100\" height=\"23.07692307692308\" fill=\"#FFB5A7\"/><rect x=\"675\" y=\"167.94871794871796\" width=\"100\" height=\"23.07692307692308\" fill=\"#A5A58D\"/><rect x=\"675\" y=\"160.25641025641028\" width=\"100\" height=\"7.692307692307693\" fill=\"#6D6875\"/><rect x=\"675\" y=\"147.43589743589746\" width=\"100\" height=\"12.820512820512821\" fill=\"#B5838D\"/><rect x=\"675\" y=\"124.35897435897438\" width=\"100\" height=\"23.07692307692308\" fill=\"#E5989B\"/><rect x=\"675\" y=\"92.30769230769232\" width=\"100\" height=\"32.05128205128205\" fill=\"#6D597A\"/><text x=\"725\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Ethan Vortex</text><rect x=\"825\" y=\"330.7692307692308\" width=\"100\" height=\"19.230769230769234\" fill=\"#E63946\"/><rect x=\"825\" y=\"317.94871794871796\" width=\"100\" height=\"12.820512820512821\" fill=\"#F4A261\"/><rect x=\"825\" y=\"310.2564102564103\" width=\"100\" height=\"7.692307692307693\" fill=\"#E9C46A\"/><rect x=\"825\" y=\"300\" width=\"100\" height=\"10.256410256410257\" fill=\"#2A9D8F\"/><rect x=\"825\" y=\"276.9230769230769\" width=\"100\" height=\"23.07692307692308\" fill=\"#264653\"/><rect x=\"825\" y=\"261.53846153846155\" width=\"100\" height=\"15.384615384615387\" fill=\"#9D4EDD\"/><rect x=\"825\" y=\"248.71794871794873\" width=\"100\" height=\"12.820512820512821\" fill=\"#FFC8DD\"/><rect x=\"825\" y=\"241.02564102564105\" width=\"100\" height=\"7.692307692307693\" fill=\"#A2D2FF\"/><rect x=\"825\" y=\"208.974358974359\" width=\"100\" height=\"32.05128205128205\" fill=\"#BDE0FE\"/><rect x=\"825\" y=\"189.74358974358978\" width=\"100\" height=\"19.230769230769234\" fill=\"#FFB5A7\"/><rect x=\"825\" y=\"182.0512820512821\" width=\"100\" height=\"7.692307692307693\" fill=\"#A5A58D\"/><rect x=\"825\" y=\"169.23076923076928\" width=\"100\" height=\"12.820512820512821\" fill=\"#6D6875\"/><rect x=\"825\" y=\"153.8461538461539\" width=\"100\" height=\"15.384615384615387\" fill=\"#B5838D\"/><rect x=\"825\" y=\"138.4615384615385\" width=\"100\" height=\"15.384615384615387\" fill=\"#E5989B\"/><rect x=\"825\" y=\"115.38461538461543\" width=\"100\" height=\"23.07692307692308\" fill=\"#6D597A\"/><text x=\"875\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Zara Nova</text><rect x=\"975\" y=\"350\" width=\"100\" height=\"0\" fill=\"#E63946\"/><rect x=\"975\" y=\"330.7692307692308\" width=\"100\" height=\"19.230769230769234\" fill=\"#F4A261\"/><rect x=\"975\" y=\"315.38461538461536\" width=\"100\" height=\"15.384615384615387\" fill=\"#E9C46A\"/><rect x=\"975\" y=\"302.56410256410254\" width=\"100\" height=\"12.820512820512821\" fill=\"#2A9D8F\"/><rect x=\"975\" y=\"294.87179487179486\" width=\"100\" height=\"7.692307692307693\" fill=\"#264653\"/><rect x=\"975\" y=\"262.8205128205128\" width=\"100\" height=\"32.05128205128205\" fill=\"#9D4EDD\"/><rect x=\"975\" y=\"239.74358974358972\" width=\"100\" height=\"23.07692307692308\" fill=\"#FFC8DD\"/><rect x=\"975\" y=\"239.74358974358972\" width=\"100\" height=\"0\" fill=\"#A2D2FF\"/><rect x=\"975\" y=\"220.5128205128205\" width=\"100\" height=\"19.230769230769234\" fill=\"#BDE0FE\"/><rect x=\"975\" y=\"210.25641025641025\" width=\"100\" height=\"10.256410256410257\" fill=\"#FFB5A7\"/><rect x=\"975\" y=\"178.2051282051282\" width=\"100\" height=\"32.05128205128205\" fill=\"#A5A58D\"/><rect x=\"975\" y=\"155.12820512820514\" width=\"100\" height=\"23.07692307692308\" fill=\"#6D6875\"/><rect x=\"975\" y=\"144.8717948717949\" width=\"100\" height=\"10.256410256410257\" fill=\"#B5838D\"/><rect x=\"975\" y=\"112.82051282051285\" width=\"100\" height=\"32.05128205128205\" fill=\"#E5989B\"/><rect x=\"975\" y=\"105.12820512820515\" width=\"100\" height=\"7.692307692307693\" fill=\"#6D597A\"/><text x=\"1025\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Kai Thunder</text><rect x=\"1125\" y=\"339.7435897435897\" width=\"100\" height=\"10.256410256410257\" fill=\"#E63946\"/><rect x=\"1125\" y=\"339.7435897435897\" width=\"100\" height=\"0\" fill=\"#F4A261\"/><rect x=\"1125\" y=\"339.7435897435897\" width=\"100\" height=\"0\" fill=\"#E9C46A\"/><rect x=\"1125\" y=\"332.05128205128204\" width=\"100\" height=\"7.692307692307693\" fill=\"#2A9D8F\"/><rect x=\"1125\" y=\"300\" width=\"100\" height=\"32.05128205128205\" fill=\"#264653\"/><rect x=\"1125\" y=\"289.7435897435897\" width=\"100\" height=\"10.256410256410257\" fill=\"#9D4EDD\"/><rect x=\"1125\" y=\"270.5128205128205\" width=\"100\" height=\"19.230769230769234\" fill=\"#FFC8DD\"/><rect x=\"1125\" y=\"247.4358974358974\" width=\"100\" height=\"23.07692307692308\" fill=\"#A2D2FF\"/><rect x=\"1125\" y=\"234.61538461538458\" width=\"100\" height=\"12.820512820512821\" fill=\"#BDE0FE\"/><rect x=\"1125\" y=\"221.79487179487177\" width=\"100\" height=\"12.820512820512821\" fill=\"#FFB5A7\"/><rect x=\"1125\" y=\"202.56410256410254\" width=\"100\" height=\"19.230769230769234\" fill=\"#A5A58D\"/><rect x=\"1125\" y=\"187.17948717948715\" width=\"100\" height=\"15.384615384615387\" fill=\"#6D6875\"/><rect x=\"1125\" y=\"164.1025641025641\" width=\"100\" height=\"23.07692307692308\" fill=\"#B5838D\"/><rect x=\"1125\" y=\"144.87179487179486\" width=\"100\" height=\"19.230769230769234\" fill=\"#E5989B\"/><rect x=\"1125\" y=\"129.48717948717947\" width=\"100\" height=\"15.384615384615387\" fill=\"#6D597A\"/><text x=\"1175\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Noah Falcon</text><rect x=\"1275\" y=\"326.9230769230769\" width=\"100\" height=\"23.07692307692308\" fill=\"#E63946\"/><rect x=\"1275\" y=\"311.53846153846155\" width=\"100\" height=\"15.384615384615387\" fill=\"#F4A261\"/><rect x=\"1275\" y=\"279.4871794871795\" width=\"100\" height=\"32.05128205128205\" fill=\"#E9C46A\"/><rect x=\"1275\" y=\"269.2307692307692\" width=\"100\" height=\"10.256410256410257\" fill=\"#2A9D8F\"/><rect x=\"1275\" y=\"269.2307692307692\" width=\"100\" height=\"0\" fill=\"#264653\"/><rect x=\"1275\" y=\"261.53846153846155\" width=\"100\" height=\"7.692307692307693\" fill=\"#9D4EDD\"/><rect x=\"1275\" y=\"246.15384615384616\" width=\"100\" height=\"15.384615384615387\" fill=\"#FFC8DD\"/><rect x=\"1275\" y=\"214.10256410256412\" width=\"100\" height=\"32.05128205128205\" fill=\"#A2D2FF\"/><rect x=\"1275\" y=\"191.02564102564105\" width=\"100\" height=\"23.07692307692308\" fill=\"#BDE0FE\"/><rect x=\"1275\" y=\"191.02564102564105\" width=\"100\" height=\"0\" fill=\"#FFB5A7\"/><rect x=\"1275\" y=\"178.20512820512823\" width=\"100\" height=\"12.820512820512821\" fill=\"#A5A58D\"/><rect x=\"1275\" y=\"146.1538461538462\" width=\"100\" height=\"32.05128205128205\" fill=\"#6D6875\"/><rect x=\"1275\" y=\"126.92307692307696\" width=\"100\" height=\"19.230769230769234\" fill=\"#B5838D\"/><rect x=\"1275\" y=\"103.84615384615388\" width=\"100\" height=\"23.07692307692308\" fill=\"#E5989B\"/><rect x=\"1275\" y=\"84.61538461538464\" width=\"100\" height=\"19.230769230769234\" fill=\"#6D597A\"/><text x=\"1325\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Isla Drift</text><rect x=\"1425\" y=\"334.61538461538464\" width=\"100\" height=\"15.384615384615387\" fill=\"#E63946\"/><rect x=\"1425\" y=\"302.5641025641026\" width=\"100\" height=\"32.05128205128205\" fill=\"#F4A261\"/><rect x=\"1425\" y=\"283.33333333333337\" width=\"100\" height=\"19.230769230769234\" fill=\"#E9C46A\"/><rect x=\"1425\" y=\"260.2564102564103\" width=\"100\" height=\"23.07692307692308\" fill=\"#2A9D8F\"/><rect x=\"1425\" y=\"237.17948717948718\" width=\"100\" height=\"23.07692307692308\" fill=\"#264653\"/><rect x=\"1425\" y=\"224.35897435897436\" width=\"100\" height=\"12.820512820512821\" fill=\"#9D4EDD\"/><rect x=\"1425\" y=\"224.35897435897436\" width=\"100\" height=\"0\" fill=\"#FFC8DD\"/><rect x=\"1425\" y=\"214.10256410256412\" width=\"100\" height=\"10.256410256410257\" fill=\"#A2D2FF\"/><rect x=\"1425\" y=\"206.4102564102564\" width=\"100\" height=\"7.692307692307693\" fill=\"#BDE0FE\"/><rect x=\"1425\" y=\"183.33333333333331\" width=\"100\" height=\"23.07692307692308\" fill=\"#FFB5A7\"/><rect x=\"1425\" y=\"167.94871794871793\" width=\"100\" height=\"15.384615384615387\" fill=\"#A5A58D\"/><rect x=\"1425\" y=\"155.1282051282051\" width=\"100\" height=\"12.820512820512821\" fill=\"#6D6875\"/><rect x=\"1425\" y=\"147.4358974358974\" width=\"100\" height=\"7.692307692307693\" fill=\"#B5838D\"/><rect x=\"1425\" y=\"132.05128205128202\" width=\"100\" height=\"15.384615384615387\" fill=\"#E5989B\"/><rect x=\"1425\" y=\"121.79487179487175\" width=\"100\" height=\"10.256410256410257\" fill=\"#6D597A\"/><text x=\"1475\" y=\"370\" text-anchor=\"middle\" font-size=\"12\" fill=\"#333\">Ravi Blaze</text><line x1=\"50\" y1=\"50\" x2=\"50\" y2=\"350\" stroke=\"#333\"/><line x1=\"50\" y1=\"350\" x2=\"45\" y2=\"350\" stroke=\"#333\"/><text x=\"40\" y=\"354\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">0</text><line x1=\"50\" y1=\"317.94871794871796\" x2=\"45\" y2=\"317.94871794871796\" stroke=\"#333\"/><text x=\"40\" y=\"321.94871794871796\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">25</text><line x1=\"50\" y1=\"285.8974358974359\" x2=\"45\" y2=\"285.8974358974359\" stroke=\"#333\"/><text x=\"40\" y=\"289.8974358974359\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">50</text><line x1=\"50\" y1=\"253.84615384615384\" x2=\"45\" y2=\"253.84615384615384\" stroke=\"#333\"/><text x=\"40\" y=\"257.8461538461538\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">75</text><line x1=\"50\" y1=\"221.7948717948718\" x2=\"45\" y2=\"221.7948717948718\" stroke=\"#333\"/><text x=\"40\" y=\"225.7948717948718\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">100</text><line x1=\"50\" y1=\"189.74358974358972\" x2=\"45\" y2=\"189.74358974358972\" stroke=\"#333\"/><text x=\"40\" y=\"193.74358974358972\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">125</text><line x1=\"50\" y1=\"157.69230769230768\" x2=\"45\" y2=\"157.69230769230768\" stroke=\"#333\"/><text x=\"40\" y=\"161.69230769230768\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">150</text><line x1=\"50\" y1=\"125.64102564102564\" x2=\"45\" y2=\"125.64102564102564\" stroke=\"#333\"/><text x=\"40\" y=\"129.64102564102564\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">175</text><line x1=\"50\" y1=\"93.58974358974359\" x2=\"45\" y2=\"93.58974358974359\" stroke=\"#333\"/><text x=\"40\" y=\"97.58974358974359\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">200</text><line x1=\"50\" y1=\"61.53846153846149\" x2=\"45\" y2=\"61.53846153846149\" stroke=\"#333\"/><text x=\"40\" y=\"65.53846153846149\" text-anchor=\"end\" font-size=\"10\" fill=\"#333\">225</text><text x=\"1550\" y=\"50\" font-size=\"14\" font-weight=\"bold\" fill=\"#333\">Races</text><rect x=\"1550\" y=\"70\" width=\"15\" height=\"15\" fill=\"#E63946\"/><text x=\"1570\" y=\"82\" font-size=\"12\" fill=\"#333\">Race1</text><rect x=\"1550\" y=\"90\" width=\"15\" height=\"15\" fill=\"#F4A261\"/><text x=\"1570\" y=\"102\" font-size=\"12\" fill=\"#333\">Race2</text><rect x=\"1550\" y=\"110\" width=\"15\" height=\"15\" fill=\"#E9C46A\"/><text x=\"1570\" y=\"122\" font-size=\"12\" fill=\"#333\">Race3</text><rect x=\"1550\" y=\"130\" width=\"15\" height=\"15\" fill=\"#2A9D8F\"/><text x=\"1570\" y=\"142\" font-size=\"12\" fill=\"#333\">Race4</text><rect x=\"1550\" y=\"150\" width=\"15\" height=\"15\" fill=\"#264653\"/><text x=\"1570\" y=\"162\" font-size=\"12\" fill=\"#333\">Race5</text><rect x=\"1550\" y=\"170\" width=\"15\" height=\"15\" fill=\"#9D4EDD\"/><text x=\"1570\" y=\"182\" font-size=\"12\" fill=\"#333\">Race6</text><rect x=\"1550\" y=\"190\" width=\"15\" height=\"15\" fill=\"#FFC8DD\"/><text x=\"1570\" y=\"202\" font-size=\"12\" fill=\"#333\">Race7</text><rect x=\"1550\" y=\"210\" width=\"15\" height=\"15\" fill=\"#A2D2FF\"/><text x=\"1570\" y=\"222\" font-size=\"12\" fill=\"#333\">Race8</text><rect x=\"1550\" y=\"230\" width=\"15\" height=\"15\" fill=\"#BDE0FE\"/><text x=\"1570\" y=\"242\" font-size=\"12\" fill=\"#333\">Race9</text><rect x=\"1550\" y=\"250\" width=\"15\" height=\"15\" fill=\"#FFB5A7\"/><text x=\"1570\" y=\"262\" font-size=\"12\" fill=\"#333\">Race10</text><rect x=\"1550\" y=\"270\" width=\"15\" height=\"15\" fill=\"#A5A58D\"/><text x=\"1570\" y=\"282\" font-size=\"12\" fill=\"#333\">Race11</text><rect x=\"1550\" y=\"290\" width=\"15\" height=\"15\" fill=\"#6D6875\"/><text x=\"1570\" y=\"302\" font-size=\"12\" fill=\"#333\">Race12</text><rect x=\"1550\" y=\"310\" width=\"15\" height=\"15\" fill=\"#B5838D\"/><text x=\"1570\" y=\"322\" font-size=\"12\" fill=\"#333\">Race13</text><rect x=\"1550\" y=\"330\" width=\"15\" height=\"15\" fill=\"#E5989B\"/><text x=\"1570\" y=\"342\" font-size=\"12\" fill=\"#333\">Race14</text><rect x=\"1550\" y=\"350\" width=\"15\" height=\"15\" fill=\"#6D597A\"/><text x=\"1570\" y=\"362\" font-size=\"12\" fill=\"#333\">Race15 </text></svg>"
    }
]